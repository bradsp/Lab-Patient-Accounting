@page "/process-remittances"
@inject Remittance835Service RemittanceService
@using System.IO

@inject ILogger<ProcessRemittances> _logger

<ErrorBoundary>
    <ChildContent>
        <!-- Existing UI components -->
        <h3>Process 835 Remittances</h3>

        @if (isLoading)
        {
            <p><em>Loading...</em></p>
        }
        else if (errorMessage != null)
        {
            <div class="alert alert-danger">@errorMessage</div>
        }
        else
        {
            <div class="row">
                <div class="col-md-4">
                    <h4>Remittance Files</h4>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>File Name</th>
                                <th>Processed Date</th>
                                <th>Updated Date</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var file in remittanceFiles)
                            {
                                <tr>
                                    <td>@Path.GetFileName(file.FileName)</td>
                                    <td>@file.ProcessedDate</td>
                                    <td>@file.UpdatedDate</td>
                                    <td>
                                        <button class="btn btn-primary" @onclick="() => LoadRemittance(file.RemittanceId)">View</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="col-md-8">
                    @if (selectedRemittance != null)
                    {
                        <h4>Remittance Details</h4>
                        <p><strong>File Name:</strong> @Path.GetFileName(selectedRemittance.FileName)</p>
                        <p><strong>Processed Date:</strong> @selectedRemittance.ProcessedDate</p>
                        <h5>Claims</h5>
                        <ul class="list-group">
                            @foreach (var claim in selectedRemittance.Claims)
                            {
                                <li class="list-group-item">
                                    <p><strong>Account No:</strong> @claim.AccountNo</p>
                                    <p><strong>Claim Charge Amount:</strong> @claim.ClaimChargeAmount</p>
                                    <p><strong>Claim Payment Amount:</strong> @claim.ClaimPaymentAmount</p>
                                    <p><strong>Patient Responsibility Amount:</strong> @claim.PatientResponsibilityAmount</p>
                                    <p><strong>Paid Amount:</strong> @claim.PaidAmount</p>
                                    <p><strong>Allowed Amount:</strong> @claim.AllowedAmount</p>
                                </li>
                            }
                        </ul>
                        <button class="btn btn-primary" @onclick="PostRemittance">Post Remittance</button>
                    }
                    else
                    {
                        <p>Select a remittance file to view details.</p>
                    }
                </div>
            </div>
        }
    </ChildContent>
    <ErrorContent>
        <div class="alert alert-danger">
            An error occurred while processing remittances. Please try again later.
        </div>
    </ErrorContent>
</ErrorBoundary>

@code {
    private List<RemittanceFileDTO> remittanceFiles = new();
    private RemittanceFile? selectedRemittance;
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            var remits = await RemittanceService.GetAllRemittancesAsync();

            remittanceFiles = ConvertToDTO(remits);

            Console.WriteLine($"Loaded {remittanceFiles?.Count ?? 0} remittance files.");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading remittance files: {ex.Message}";
            Console.WriteLine($"Exception in OnInitializedAsync: {ex}");
        }
        finally
        {
            isLoading = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _logger.LogInformation("OnAfterRenderAsync called.");
        }
    }

    private List<RemittanceFileDTO> ConvertToDTO(List<RemittanceFile> remittanceFiles)
    {
        return remittanceFiles.Select(r => new RemittanceFileDTO
            {
                RemittanceId = r.RemittanceId,
                FileName = r.FileName,
                ProcessedDate = r.ProcessedDate,
                UpdatedDate = r.UpdatedDate,
                UpdatedUser = r.UpdatedUser,
                UpdatedApp = r.UpdatedApp,
                UpdatedHost = r.UpdatedHost
            }).ToList();
    }

    private async Task LoadRemittance(int remittanceId)
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            Console.WriteLine($"Loading remittance with ID: {remittanceId}");
            selectedRemittance = await RemittanceService.GetRemittanceAsync(remittanceId);
            Console.WriteLine("Remittance loaded.");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading remittance: {ex.Message}";
            Console.WriteLine($"Exception in LoadRemittance: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Ensure the UI is updated
        }
    }

    private async Task PostRemittance()
    {
        if (selectedRemittance != null)
        {
            try
            {
                await RemittanceService.PostRemittanceAsync(selectedRemittance.RemittanceId);
                // Refresh the remittance files list
                var remits = await RemittanceService.GetAllRemittancesAsync();
                remittanceFiles = ConvertToDTO(remits);
                selectedRemittance = null;
            }
            catch (Exception ex)
            {
                errorMessage = $"Error posting remittance: {ex.Message}";
            }
            finally
            {
                StateHasChanged(); // Ensure the UI is updated
            }
        }
    }
}
