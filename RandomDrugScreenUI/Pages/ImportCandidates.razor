@page "/import"
@inject IRandomDrugScreenService RdsService
@inject DictionaryService DictionaryService
@inject LabBilling.Core.DataAccess.IAppEnvironment AppEnvironment
@inject LabBilling.Core.UnitOfWork.IUnitOfWork UnitOfWork

<PageTitle>Import Candidates - Random Drug Screen</PageTitle>

<h3>Import Candidates</h3>

<div class="row">
    <div class="col-md-8">
        <div class="card">
         <div class="card-header">
       <h5>Import Configuration</h5>
 </div>
          <div class="card-body">
          <div class="mb-3">
           <label for="clientSelect" class="form-label">Select Client *</label>
  <select id="clientSelect" class="form-select" @bind="selectedClient">
  <option value="">-- Select a Client --</option>
     @foreach (var client in clients)
     {
        <option value="@client.ClientMnem">@client.Name (@client.ClientMnem)</option>
          }
     </select>
        </div>

  <div class="mb-3">
        <label class="form-label">Import Mode *</label>
         <div class="form-check">
        <input class="form-check-input" type="radio" name="importMode" id="mergeMode" checked="@(!replaceAll)" @onchange="@(() => replaceAll = false)">
       <label class="form-check-label" for="mergeMode">
    <strong>Merge/Update</strong> - Add new candidates, update existing, mark missing as deleted
    </label>
         </div>
       <div class="form-check">
            <input class="form-check-input" type="radio" name="importMode" id="replaceMode" checked="@replaceAll" @onchange="@(() => replaceAll = true)">
     <label class="form-check-label" for="replaceMode">
           <strong>Replace All</strong> - Delete all existing candidates for this client and import new list
        </label>
           </div>
          </div>

         <div class="mb-3">
           <label for="fileUpload" class="form-label">Select CSV File *</label>
            <InputFile id="fileUpload" class="form-control" OnChange="HandleFileSelected" accept=".csv,.txt" />
    <small class="text-muted">
        Expected format: Name, Shift (optional)<br />
                  Example: John Doe, Day<br />
 Or: Jane Smith
       </small>
                </div>

       @if (validationMessage != null)
     {
     <div class="alert alert-warning">
             <span class="oi oi-warning"></span> @validationMessage
               </div>
      }

    @if (errorMessage != null)
 {
     <div class="alert alert-danger">
        <span class="oi oi-x"></span> @errorMessage
     </div>
   }

                <div class="d-grid gap-2">
        <button class="btn btn-primary" @onclick="ParseAndPreview" disabled="@(!CanPreview() || isProcessing)">
  @if (isProcessing)
    {
         <span class="spinner-border spinner-border-sm" role="status"></span>
        <text> Processing...</text>
         }
      else
          {
 <span class="oi oi-eye"></span>
       <text> Preview Import</text>
             }
   </button>
   </div>
            </div>
        </div>
    </div>

 <div class="col-md-4">
     <div class="card">
  <div class="card-header">
          <h5>Import Instructions</h5>
        </div>
            <div class="card-body">
             <h6>CSV File Format:</h6>
        <p class="small">The CSV file should contain one candidate per line:</p>
  <ul class="small">
       <li><strong>Name</strong> (required)</li>
     <li><strong>Shift</strong> (optional)</li>
     </ul>

         <h6 class="mt-3">Import Modes:</h6>
         <p class="small"><strong>Merge/Update:</strong> Preserves existing candidates and updates their information. New candidates are added, and candidates not in the file are marked as deleted.</p>
   <p class="small"><strong>Replace All:</strong> Completely replaces all candidates for the selected client with the imported list.</p>

  @if (selectedFile != null)
        {
            <hr />
        <h6>Selected File:</h6>
         <p class="small mb-0"><strong>Name:</strong> @selectedFile.Name</p>
           <p class="small mb-0"><strong>Size:</strong> @FormatFileSize(selectedFile.Size)</p>
       }
            </div>
        </div>
</div>
</div>

@if (previewCandidates != null && previewCandidates.Any())
{
    <div class="row mt-4">
        <div class="col-md-12">
            <div class="card">
      <div class="card-header bg-info text-white">
              <h5><span class="oi oi-eye"></span> Preview - @previewCandidates.Count Candidate(s)</h5>
          </div>
         <div class="card-body">
      <div class="alert alert-info">
    <strong>Review the data below before importing.</strong> Verify that names and shifts are correct.
         </div>

  <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
           <table class="table table-striped table-sm">
       <thead class="sticky-top bg-white">
 <tr>
              <th>#</th>
             <th>Name</th>
       <th>Shift</th>
            <th>Client</th>
     </tr>
     </thead>
     <tbody>
           @for (int i = 0; i < previewCandidates.Count; i++)
       {
       var candidate = previewCandidates[i];
       <tr>
 <td>@(i + 1)</td>
        <td>@candidate.Name</td>
          <td>@(string.IsNullOrEmpty(candidate.Shift) ? "-" : candidate.Shift)</td>
          <td>@candidate.ClientMnemonic</td>
  </tr>
  }
          </tbody>
     </table>
             </div>

                <div class="d-flex gap-2 mt-3">
   <button class="btn btn-success" @onclick="ConfirmImport" disabled="@isProcessing">
   @if (isProcessing)
  {
        <span class="spinner-border spinner-border-sm" role="status"></span>
         <text> Importing...</text>
           }
      else
        {
      <span class="oi oi-check"></span>
 <text> Confirm and Import</text>
        }
      </button>
             <button class="btn btn-secondary" @onclick="ClearPreview" disabled="@isProcessing">
          <span class="oi oi-x"></span> Cancel
        </button>
    </div>
         </div>
          </div>
        </div>
 </div>
}

@if (importResult != null)
{
    <div class="row mt-4">
        <div class="col-md-12">
            <div class="card">
   <div class="card-header @(importResult.Success ? "bg-success" : "bg-danger") text-white">
      <h5>
         <span class="oi @(importResult.Success ? "oi-check" : "oi-x")"></span>
   Import @(importResult.Success ? "Successful" : "Failed")
             </h5>
                </div>
        <div class="card-body">
 @if (importResult.Success)
        {
             <div class="alert alert-success">
      <h6>Import completed successfully!</h6>
        <ul class="mb-0">
            <li><strong>Total Records:</strong> @importResult.TotalRecords</li>
              <li><strong>Added:</strong> @importResult.AddedCount</li>
          <li><strong>Updated:</strong> @importResult.UpdatedCount</li>
           <li><strong>Deleted:</strong> @importResult.DeletedCount</li>
            </ul>
        </div>
   }
         else
        {
        <div class="alert alert-danger">
     <h6>Import failed with errors:</h6>
     <ul class="mb-0">
        @foreach (var error in importResult.Errors)
            {
      <li>@error</li>
   }
       </ul>
      </div>
         }

       <div class="d-flex gap-2 mt-3">
            <a href="/candidates" class="btn btn-primary">
         <span class="oi oi-people"></span> View Candidates
       </a>
             <button class="btn btn-secondary" @onclick="ResetImport">
            <span class="oi oi-reload"></span> Import Another File
   </button>
                </div>
        </div>
          </div>
     </div>
    </div>
}

@code {
    private List<Client> clients = new();
    private List<RandomDrugScreenPerson>? previewCandidates;
    private ImportResult? importResult;

    private string selectedClient = "";
    private bool replaceAll = false;
  private bool isProcessing = false;
    private string? validationMessage;
    private string? errorMessage;

    private IBrowserFile? selectedFile;
    private string? fileContent;

    protected override async Task OnInitializedAsync()
    {
        await LoadClients();
    }

    private async Task LoadClients()
    {
        try
        {
     clients = await DictionaryService.GetAllClientsAsync(UnitOfWork, false);
        }
        catch (Exception ex)
      {
       errorMessage = $"Error loading clients: {ex.Message}";
     Console.WriteLine(ex.ToString());
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        validationMessage = null;
     errorMessage = null;
    previewCandidates = null;
  importResult = null;

        if (selectedFile.Size > 5 * 1024 * 1024) // 5MB limit
        {
       errorMessage = "File size exceeds 5MB limit";
         selectedFile = null;
          return;
        }

try
        {
  using var reader = new StreamReader(selectedFile.OpenReadStream());
            fileContent = await reader.ReadToEndAsync();
    }
        catch (Exception ex)
        {
       errorMessage = $"Error reading file: {ex.Message}";
    selectedFile = null;
   }
    }

    private bool CanPreview()
    {
        if (string.IsNullOrEmpty(selectedClient))
 {
      validationMessage = "Please select a client";
    return false;
      }

   if (selectedFile == null || string.IsNullOrEmpty(fileContent))
        {
            validationMessage = "Please select a file";
            return false;
        }

   validationMessage = null;
 return true;
    }

    private async Task ParseAndPreview()
    {
   if (!CanPreview()) return;

      isProcessing = true;
        errorMessage = null;
        previewCandidates = new List<RandomDrugScreenPerson>();

        try
  {
            var lines = fileContent!.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);
            int lineNumber = 0;

            foreach (var line in lines)
 {
           lineNumber++;
       
      // Skip empty lines
        if (string.IsNullOrWhiteSpace(line)) continue;

    // Skip header line if it contains "name" or "shift"
      if (lineNumber == 1 && (line.ToLower().Contains("name") || line.ToLower().Contains("shift")))
         continue;

     var parts = line.Split(',');
   
      if (parts.Length == 0 || string.IsNullOrWhiteSpace(parts[0]))
       {
     Console.WriteLine($"Skipping line {lineNumber}: Empty name");
        continue;
     }

  var candidate = new RandomDrugScreenPerson
           {
         Name = parts[0].Trim().Trim('"'),
   Shift = parts.Length > 1 ? parts[1].Trim().Trim('"') : "",
   ClientMnemonic = selectedClient,
   TestDate = null
    };

 previewCandidates.Add(candidate);
            }

    if (!previewCandidates.Any())
     {
      errorMessage = "No valid candidates found in file";
     previewCandidates = null;
            }
        }
    catch (Exception ex)
        {
            errorMessage = $"Error parsing file: {ex.Message}";
         previewCandidates = null;
        }
      finally
   {
        isProcessing = false;
     }
    }

    private async Task ConfirmImport()
    {
        if (previewCandidates == null || !previewCandidates.Any()) return;

        isProcessing = true;
 errorMessage = null;

 try
        {
            importResult = await RdsService.ImportCandidatesAsync(previewCandidates, selectedClient, replaceAll);
            
          if (importResult.Success)
      {
        previewCandidates = null;
    }
     }
        catch (Exception ex)
        {
            errorMessage = $"Error importing candidates: {ex.Message}";
       Console.WriteLine(ex.ToString());
        }
        finally
        {
         isProcessing = false;
        }
    }

  private void ClearPreview()
    {
        previewCandidates = null;
     validationMessage = null;
    }

    private void ResetImport()
    {
     selectedClient = "";
        replaceAll = false;
    selectedFile = null;
        fileContent = null;
        previewCandidates = null;
        importResult = null;
        validationMessage = null;
        errorMessage = null;
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
   order++;
   len = len / 1024;
}
    return $"{len:0.##} {sizes[order]}";
    }
}
