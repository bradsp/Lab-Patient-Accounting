@page "/selection"
@inject IRandomDrugScreenService RdsService
@inject DictionaryService DictionaryService
@inject LabBilling.Core.DataAccess.IAppEnvironment AppEnvironment
@inject LabBilling.Core.UnitOfWork.IUnitOfWork UnitOfWork

<PageTitle>Random Selection - Random Drug Screen</PageTitle>

<h3>Random Drug Screen Selection</h3>

<div class="row">
    <div class="col-md-8">
        <div class="card">
     <div class="card-header">
   <h5>Selection Parameters</h5>
         </div>
      <div class="card-body">
           <div class="row mb-3">
  <div class="col-md-6">
          <label for="clientSelect" class="form-label">Select Client *</label>
     <select id="clientSelect" class="form-select" value="@selectedClient" @onchange="OnClientChanged">
    <option value="">-- Select a Client --</option>
     @foreach (var client in clients)
     {
     <option value="@client.ClientMnem">@client.Name (@client.ClientMnem)</option>
  }
</select>
    </div>
      <div class="col-md-6">
           <label for="shiftSelect" class="form-label">Filter by Shift (Optional)</label>
    <select id="shiftSelect" class="form-select" @bind="selectedShift">
      <option value="">-- All Shifts --</option>
  @foreach (var shift in shifts)
  {
<option value="@shift">@shift</option>
   }
         </select>
  </div>
        </div>

      <div class="row mb-3">
    <div class="col-md-6">
    <label for="countInput" class="form-label">Number to Select *</label>
     <input type="number" id="countInput" class="form-control" @bind="selectionCount" min="1" max="@availableCount" />
      <small class="text-muted">Available candidates: @availableCount</small>
     </div>
       </div>

   @if (validationMessage != null)
      {
 <div class="alert alert-warning">
              <span class="oi oi-warning"></span> @validationMessage
        </div>
     }

     @if (errorMessage != null)
   {
        <div class="alert alert-danger">
      <span class="oi oi-x"></span> @errorMessage
       </div>
      }

           <div class="d-grid gap-2">
          <button class="btn btn-primary btn-lg" @onclick="PerformSelection" disabled="@(isProcessing || !CanPerformSelection())">
  @if (isProcessing)
    {
        <span class="spinner-border spinner-border-sm" role="status"></span>
      <text> Generating Selection...</text>
      }
                  else
                {
          <span class="oi oi-random"></span>
           <text> Generate Random Selection</text>
    }
            </button>
       </div>
    </div>
     </div>
    </div>

    <div class="col-md-4">
     <div class="card">
            <div class="card-header">
     <h5>Selection Info</h5>
    </div>
            <div class="card-body">
  <dl>
      <dt>Client</dt>
    <dd>@(string.IsNullOrEmpty(selectedClient) ? "Not selected" : selectedClient)</dd>
        
           <dt>Shift Filter</dt>
      <dd>@(string.IsNullOrEmpty(selectedShift) ? "All shifts" : selectedShift)</dd>
   
           <dt>Selection Count</dt>
         <dd>@selectionCount</dd>
   
            <dt>Available Candidates</dt>
   <dd>@availableCount</dd>
                </dl>

      @if (lastSelectionDate.HasValue)
     {
   <hr />
             <p class="text-muted small">
        <strong>Last Selection:</strong><br />
            @lastSelectionDate.Value.ToString("g")
         </p>
}
            </div>
    </div>
    </div>
</div>

@if (selectedCandidates != null && selectedCandidates.Any())
{
    <div class="row mt-4">
  <div class="col-md-12">
            <div class="card">
 <div class="card-header bg-success text-white">
 <h5><span class="oi oi-check"></span> Selection Results</h5>
    </div>
         <div class="card-body">
      <div class="alert alert-success">
  <strong>Success!</strong> @selectedCandidates.Count candidate(s) have been randomly selected.
         </div>

    <div class="table-responsive">
       <table class="table table-striped">
      <thead>
             <tr>
       <th>#</th>
        <th>Name</th>
   <th>Client</th>
    <th>Shift</th>
            <th>Last Test Date</th>
   <th>Selected On</th>
   </tr>
    </thead>
  <tbody>
   @for (int i = 0; i < selectedCandidates.Count; i++)
           {
        var candidate = selectedCandidates[i];
        <tr>
        <td>@(i + 1)</td>
           <td><strong>@candidate.Name</strong></td>
          <td>@candidate.ClientMnemonic</td>
  <td>@(string.IsNullOrEmpty(candidate.Shift) ? "-" : candidate.Shift)</td>
     <td>@(candidate.TestDate.HasValue ? candidate.TestDate.Value.ToShortDateString() : "Never")</td>
<td>@DateTime.Now.ToShortDateString()</td>
   </tr>
    }
   </tbody>
             </table>
  </div>

           <div class="d-flex gap-2">
           <button class="btn btn-primary" @onclick="PrintResults">
    <span class="oi oi-print"></span> Print Results
            </button>
          <button class="btn btn-secondary" @onclick="ExportResults">
 <span class="oi oi-data-transfer-download"></span> Export to CSV
      </button>
         <button class="btn btn-outline-secondary" @onclick="ClearResults">
          <span class="oi oi-x"></span> Clear Results
    </button>
   </div>
            </div>
        </div>
        </div>
    </div>
}

@code {
    private List<Client> clients = new();
    private List<string> shifts = new();
    private List<RandomDrugScreenPerson>? selectedCandidates;
    
    private string selectedClient = "";
    private string selectedShift = "";
    private int selectionCount = 1;
    private int availableCount = 0;
    
    private bool isProcessing = false;
    private string? validationMessage;
    private string? errorMessage;
    private DateTime? lastSelectionDate;

    protected override async Task OnInitializedAsync()
    {
      await LoadClients();
    }

    private async Task LoadClients()
    {
 try
        {
     clients = await DictionaryService.GetAllClientsAsync(UnitOfWork, false);
        }
     catch (Exception ex)
        {
    errorMessage = $"Error loading clients: {ex.Message}";
      Console.WriteLine(ex.ToString());
        }
    }

    private async Task OnClientChanged(ChangeEventArgs e)
    {
selectedClient = e.Value?.ToString() ?? "";
     selectedShift = "";
 selectedCandidates = null;
        validationMessage = null;
  errorMessage = null;

        if (!string.IsNullOrEmpty(selectedClient))
  {
   await LoadShifts();
            await UpdateAvailableCount();
        }
        else
      {
            shifts = new List<string>();
            availableCount = 0;
        }
    }

    private async Task LoadShifts()
    {
        try
 {
            shifts = await RdsService.GetDistinctShiftsAsync(selectedClient);
        }
        catch (Exception ex)
        {
     Console.WriteLine($"Error loading shifts: {ex.Message}");
          shifts = new List<string>();
      }
    }

    private async Task UpdateAvailableCount()
    {
        try
        {
            List<RandomDrugScreenPerson> candidates;
     if (!string.IsNullOrEmpty(selectedShift))
            {
       candidates = await RdsService.GetCandidatesByClientAsync(selectedClient, false);
       availableCount = candidates.Count(c => c.Shift == selectedShift);
            }
   else
       {
    candidates = await RdsService.GetCandidatesByClientAsync(selectedClient, false);
       availableCount = candidates.Count;
     }

            // Adjust selection count if it exceeds available
      if (selectionCount > availableCount)
{
        selectionCount = availableCount;
  }
        }
  catch (Exception ex)
        {
  Console.WriteLine($"Error updating available count: {ex.Message}");
            availableCount = 0;
        }
  }

    private bool CanPerformSelection()
    {
  if (string.IsNullOrEmpty(selectedClient))
   {
       validationMessage = "Please select a client";
            return false;
        }

        if (selectionCount < 1)
        {
  validationMessage = "Selection count must be at least 1";
         return false;
        }

        if (selectionCount > availableCount)
   {
            validationMessage = $"Selection count ({selectionCount}) exceeds available candidates ({availableCount})";
return false;
        }

        if (availableCount == 0)
        {
     validationMessage = "No candidates available for this client/shift combination";
            return false;
        }

        validationMessage = null;
        return true;
    }

    private async Task PerformSelection()
    {
  if (!CanPerformSelection()) return;

        isProcessing = true;
  errorMessage = null;
        selectedCandidates = null;

        try
 {
            selectedCandidates = await RdsService.SelectRandomCandidatesAsync(
           selectedClient, 
                selectionCount, 
           string.IsNullOrEmpty(selectedShift) ? null : selectedShift);

            lastSelectionDate = DateTime.Now;
        }
        catch (Exception ex)
        {
   errorMessage = $"Error performing selection: {ex.Message}";
            Console.WriteLine(ex.ToString());
        }
        finally
        {
    isProcessing = false;
        }
    }

    private void PrintResults()
    {
      // TODO: Implement print functionality using JS Interop
        Console.WriteLine("Print functionality to be implemented");
    }

    private void ExportResults()
    {
if (selectedCandidates == null || !selectedCandidates.Any()) return;

  // Create CSV content
        var csv = new System.Text.StringBuilder();
    csv.AppendLine("Name,Client,Shift,Last Test Date,Selected On");
        
        foreach (var candidate in selectedCandidates)
        {
      var testDate = candidate.TestDate.HasValue ? candidate.TestDate.Value.ToShortDateString() : "Never";
   csv.AppendLine($"\"{candidate.Name}\",\"{candidate.ClientMnemonic}\",\"{candidate.Shift}\",\"{testDate}\",\"{DateTime.Now.ToShortDateString()}\"");
   }

 // TODO: Implement file download using JS Interop
     Console.WriteLine("Export functionality to be implemented");
        Console.WriteLine(csv.ToString());
    }

    private void ClearResults()
    {
        selectedCandidates = null;
        lastSelectionDate = null;
    }
}
