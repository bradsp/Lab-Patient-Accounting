@page "/reports"
@inject IRandomDrugScreenService RdsService
@inject DictionaryService DictionaryService
@inject LabBilling.Core.DataAccess.IAppEnvironment AppEnvironment
@inject LabBilling.Core.UnitOfWork.IUnitOfWork UnitOfWork

<PageTitle>Reports - Random Drug Screen</PageTitle>

<h3>Random Drug Screen Reports</h3>

<div class="row">
    <div class="col-md-4">
 <div class="card">
<div class="card-header">
    <h5>Report Parameters</h5>
      </div>
      <div class="card-body">
   <div class="mb-3">
        <label for="reportType" class="form-label">Report Type *</label>
     <select id="reportType" class="form-select" @bind="selectedReportType">
  <option value="">-- Select Report --</option>
       <option value="non-selected">Non-Selected Candidates</option>
  <option value="all-candidates">All Candidates</option>
        <option value="client-summary">Client Summary</option>
    </select>
      </div>

            <div class="mb-3">
<label for="clientSelect" class="form-label">Select Client *</label>
   <select id="clientSelect" class="form-select" @bind="selectedClient">
      <option value="">-- Select Client --</option>
    @foreach (var client in clients)
     {
          <option value="@client.ClientMnem">@client.Name (@client.ClientMnem)</option>
}
  </select>
   </div>

 @if (selectedReportType == "non-selected")
     {
       <div class="mb-3">
   <label for="fromDate" class="form-label">From Date (Optional)</label>
     <input type="date" id="fromDate" class="form-control" @bind="fromDate" />
     <small class="text-muted">Show candidates not tested since this date</small>
      </div>
     }

     @if (validationMessage != null)
{
  <div class="alert alert-warning">
        <span class="oi oi-warning"></span> @validationMessage
       </div>
      }

            @if (errorMessage != null)
            {
         <div class="alert alert-danger">
   <span class="oi oi-x"></span> @errorMessage
        </div>
     }

      <div class="d-grid gap-2">
       <button class="btn btn-primary" @onclick="GenerateReport" disabled="@(!CanGenerateReport() || isLoading)">
 @if (isLoading)
       {
    <span class="spinner-border spinner-border-sm" role="status"></span>
      <text> Generating...</text>
       }
   else
           {
  <span class="oi oi-bar-chart"></span>
      <text> Generate Report</text>
   }
         </button>
      </div>
         </div>
 </div>
</div>

    <div class="col-md-8">
@if (reportData != null && reportData.Any())
        {
    <div class="card">
   <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
          <h5 class="mb-0">
       <span class="oi oi-document"></span>
    @GetReportTitle()
  </h5>
   <div>
          <button class="btn btn-sm btn-light" @onclick="ExportToCsv">
         <span class="oi oi-data-transfer-download"></span> Export CSV
        </button>
          </div>
        </div>
  <div class="card-body">
          @if (selectedReportType == "client-summary")
            {
     <div class="row mb-3">
        <div class="col-md-4">
 <div class="card text-center">
     <div class="card-body">
       <h6 class="card-title">Total Candidates</h6>
     <p class="display-6">@reportData.Count</p>
    </div>
  </div>
         </div>
      <div class="col-md-4">
      <div class="card text-center">
       <div class="card-body">
            <h6 class="card-title">Active</h6>
       <p class="display-6 text-success">@reportData.Count(c => !c.IsDeleted)</p>
   </div>
     </div>
     </div>
          <div class="col-md-4">
     <div class="card text-center">
     <div class="card-body">
    <h6 class="card-title">Deleted</h6>
       <p class="display-6 text-danger">@reportData.Count(c => c.IsDeleted)</p>
      </div>
       </div>
 </div>
      </div>

          @if (reportData.GroupBy(c => c.Shift).Any())
       {
      <div class="mb-3">
       <h6>Candidates by Shift:</h6>
            <div class="table-responsive">
    <table class="table table-sm">
      <thead>
        <tr>
  <th>Shift</th>
 <th>Count</th>
            </tr>
      </thead>
 <tbody>
     @foreach (var group in reportData.GroupBy(c => string.IsNullOrEmpty(c.Shift) ? "Unassigned" : c.Shift).OrderBy(g => g.Key))
         {
    <tr>
       <td>@group.Key</td>
    <td>@group.Count()</td>
     </tr>
     }
         </tbody>
      </table>
    </div>
   </div>
      }
            }

    <div class="table-responsive" style="max-height: 600px; overflow-y: auto;">
           <table class="table table-striped table-hover">
  <thead class="sticky-top bg-white">
      <tr>
     <th>Name</th>
 <th>Shift</th>
       @if (selectedReportType != "client-summary")
       {
        <th>Client</th>
    }
      <th>Last Test Date</th>
 @if (selectedReportType == "all-candidates" || selectedReportType == "client-summary")
      {
    <th>Status</th>
  }
  </tr>
        </thead>
  <tbody>
        @foreach (var candidate in reportData)
 {
       <tr class="@(candidate.IsDeleted ? "table-secondary" : "")">
           <td>@candidate.Name</td>
      <td>@(string.IsNullOrEmpty(candidate.Shift) ? "-" : candidate.Shift)</td>
          @if (selectedReportType != "client-summary")
            {
       <td>@candidate.ClientMnemonic</td>
     }
    <td>@(candidate.TestDate.HasValue ? candidate.TestDate.Value.ToShortDateString() : "Never")</td>
     @if (selectedReportType == "all-candidates" || selectedReportType == "client-summary")
       {
        <td>
        @if (candidate.IsDeleted)
           {
     <span class="badge bg-danger">Deleted</span>
    }
         else
       {
       <span class="badge bg-success">Active</span>
      }
         </td>
    }
        </tr>
       }
    </tbody>
         </table>
      </div>

       <div class="mt-3">
      <p class="text-muted">
        Total Records: @reportData.Count | Generated: @DateTime.Now.ToString("g")
 </p>
            </div>
        </div>
   </div>
        }
      else if (!isLoading && reportData != null)
        {
   <div class="alert alert-info">
   <span class="oi oi-info"></span> No data found for the selected criteria.
            </div>
   }
    </div>
</div>

@code {
    private List<Client> clients = new();
    private List<RandomDrugScreenPerson>? reportData;

  private string selectedReportType = "";
    private string selectedClient = "";
    private DateTime? fromDate;

    private bool isLoading = false;
    private string? validationMessage;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadClients();
    }

    private async Task LoadClients()
    {
   try
        {
   clients = await DictionaryService.GetAllClientsAsync(UnitOfWork, false);
        }
        catch (Exception ex)
        {
      errorMessage = $"Error loading clients: {ex.Message}";
    Console.WriteLine(ex.ToString());
     }
    }

    private bool CanGenerateReport()
    {
        if (string.IsNullOrEmpty(selectedReportType))
        {
            validationMessage = "Please select a report type";
     return false;
        }

   if (string.IsNullOrEmpty(selectedClient))
   {
      validationMessage = "Please select a client";
      return false;
        }

 validationMessage = null;
        return true;
    }

    private async Task GenerateReport()
    {
   if (!CanGenerateReport()) return;

     isLoading = true;
        errorMessage = null;
     reportData = null;

     try
        {
       switch (selectedReportType)
            {
      case "non-selected":
       reportData = await RdsService.GetNonSelectedCandidatesAsync(selectedClient, fromDate);
   break;
           case "all-candidates":
         reportData = await RdsService.GetCandidatesByClientAsync(selectedClient, false);
       break;
case "client-summary":
     reportData = await RdsService.GetCandidatesByClientAsync(selectedClient, true);
        break;
       }
        }
        catch (Exception ex)
        {
       errorMessage = $"Error generating report: {ex.Message}";
Console.WriteLine(ex.ToString());
      }
        finally
 {
       isLoading = false;
  }
    }

    private string GetReportTitle()
    {
        return selectedReportType switch
    {
  "non-selected" => $"Non-Selected Candidates - {selectedClient}",
       "all-candidates" => $"All Active Candidates - {selectedClient}",
     "client-summary" => $"Client Summary - {selectedClient}",
       _ => "Report"
        };
    }

    private void ExportToCsv()
    {
        if (reportData == null || !reportData.Any()) return;

        var csv = new System.Text.StringBuilder();
        
        // Header
  if (selectedReportType == "client-summary")
      {
   csv.AppendLine("Name,Shift,Last Test Date,Status");
        }
     else
 {
         csv.AppendLine("Name,Shift,Client,Last Test Date" + 
       (selectedReportType == "all-candidates" ? ",Status" : ""));
        }

        // Data
        foreach (var candidate in reportData)
     {
       var testDate = candidate.TestDate.HasValue ? candidate.TestDate.Value.ToShortDateString() : "Never";
     var status = candidate.IsDeleted ? "Deleted" : "Active";

    if (selectedReportType == "client-summary")
        {
       csv.AppendLine($"\"{candidate.Name}\",\"{candidate.Shift}\",\"{testDate}\",\"{status}\"");
            }
   else if (selectedReportType == "all-candidates")
    {
       csv.AppendLine($"\"{candidate.Name}\",\"{candidate.Shift}\",\"{candidate.ClientMnemonic}\",\"{testDate}\",\"{status}\"");
          }
         else
   {
    csv.AppendLine($"\"{candidate.Name}\",\"{candidate.Shift}\",\"{candidate.ClientMnemonic}\",\"{testDate}\"");
 }
        }

 // TODO: Implement file download using JS Interop
 Console.WriteLine("CSV Export:");
Console.WriteLine(csv.ToString());
    }
}
